name: CI

on:
  push:
    branches:
      - master
    tags:
      - '**'
  pull_request: {}
  workflow_dispatch:

jobs:
  test:
    name: test py${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ['3.8', '3.9']

    runs-on: ${{ matrix.os }}-latest

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - run: pip install -U wheel
    - run: pip install -r tests/requirements.txt
    - run: pip install .
    - run: pip freeze

    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_KEY }}
        aws-region: us-east-1
        role-to-assume: aioaws-testing-role
        role-duration-seconds: 1200

    - name: test
      run: make test
      env:
        TEST_AWS_ACCESS_KEY: ${{ secrets.TEST_AWS_ACCESS_KEY }}
        TEST_AWS_SECRET_KEY: ${{ secrets.TEST_AWS_SECRET_KEY }}
        TEST_AWS_SESSION_ACCESS_KEY: ${{ env.AWS_ACCESS_KEY_ID }}
        TEST_AWS_SESSION_SECRET_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        TEST_AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
        TEST_AWS_S3_BUCKET_NAME: ${{ secrets.TEST_AWS_S3_BUCKET_NAME }}
        TEST_AWS_SES_ADDRESS: ${{ secrets.TEST_AWS_SES_ADDRESS }}

    - run: coverage xml

    - uses: codecov/codecov-action@v1.2.1
      with:
        file: ./coverage.xml
        env_vars: PYTHON,OS

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: '3.8'

    - run: pip install -U pip wheel
    - run: pip install -r tests/requirements-linting.txt
    - run: pip install .

    - run: make lint
    - run: make mypy

  deploy:
    needs:
      - test
      - lint
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'

      - name: install
        run: |
          pip install -U pip setuptools wheel twine
          pip install .

      - name: set version
        run: VERSION_PATH='aioaws/version.py' python <(curl -Ls https://git.io/JT3rm)

      - run: python setup.py sdist bdist_wheel

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
